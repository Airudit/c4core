name: create_c4_pack

on:
  - push
  - workflow_dispatch

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  
jobs:
  createPack:
    # https://github.community/t/create-matrix-with-multiple-os-and-env-for-each-one/16895/6
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: ubuntu-latest
          - os: windows-latest

    steps:

      # Get latest CMake and ninja
      # https://github.com/marketplace/actions/get-cmake
      - name: Get cmake+ninja
        uses: lukka/get-cmake@latest

      - name: checkout
        uses: actions/checkout@v2
        with: {submodules: recursive}

      - name: show versions
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        run: |
          cmake --version
          echo "SRC_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "TEST_DIR=${{runner.workspace}}/build/test" >> $GITHUB_ENV
          echo "PACK_DIR=${{runner.workspace}}/build/pack" >> $GITHUB_ENV
          cmake -E echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          cmake -E echo "runner.workspace=${{runner.workspace}}"
          cmake -E echo "SRC_DIR=$SRC_DIR"
          cmake -E echo "TEST_DIR=$TEST_DIR"
          cmake -E echo "PACK_DIR=$PACK_DIR"

      - name: create build dirs
        shell: bash
        run: |
          cmake -E echo "SRC_DIR=$SRC_DIR"
          cmake -E echo "TEST_DIR=$TEST_DIR"
          cmake -E echo "PACK_DIR=$PACK_DIR"
          cmake -E make_directory $PACK_DIR
          cmake -E make_directory $TEST_DIR


      # run the tests first
      - name: configure_test
        shell: bash
        run: cmake -S $SRC_DIR -B $TEST_DIR -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DC4CORE_BUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$TEST_DIR/../install_test

      - name: build_test
        shell: bash
        run: cmake --build $TEST_DIR --config $BUILD_TYPE --parallel --target test-build

      - name: run_test
        shell: bash
        run: cmake --build $TEST_DIR --config $BUILD_TYPE --target test


      # if the tests succeed, build and create the pack.
      # We do not pack the test directory because it brings
      # third party projects (eg gtest) into cmake.
      - name: configure_pack
        shell: bash
        run: cmake -S $SRC_DIR -B $PACK_DIR -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: build_pack
        shell: bash
        run: cmake --build $PACK_DIR --config $BUILD_TYPE --parallel

      - name: create_pack
        shell: bash
        run: |
          cd $PACK_DIR
          cpack -C $BUILD_TYPE --verbose
